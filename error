package tests;

import base.BaseTest;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.NoSuchWindowException;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.Test;

import java.time.Duration;
import java.util.List;
import java.util.stream.Collectors;

public class LinkVerificationTest extends BaseTest {
    private static final Logger logger = Log OI.getLogger(LinkVerificationTest.class);
    private final WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));

    @Test(priority = 3, description = "Verify all valid internal links navigate correctly and print all links")
    public void testAllLinksFunctionality() {
        logger.info("Starting LinkVerificationTest: testAllLinksFunctionality");

        // Ensure driver is not null at start
        if (driver == null) {
            Assert.fail("Driver is null - cannot proceed with link verification");
            return;
        }

        // Step 1: Get all href strings (no elements â€“ avoids staleness)
        List<String> allHrefs = donationPage.getAllLinkHrefs();
        logger.info("Found {} valid links to verify", allHrefs.size());

        // NEW: Print all links to console/logs
        logger.info("=== ALL LINKS FOUND ON DONATION PAGE ===");
        for (int i = 0; i < allHrefs.size(); i++) {
            logger.info("Link {}: {}", i + 1, allHrefs.get(i));
        }
        logger.info("=== END LINKS LIST ===");

        Assert.assertTrue(allHrefs.size() > 0, "No valid links found on page");

        String originalUrl = driver.getCurrentUrl();
        logger.debug("Original URL: {}", originalUrl);

        // Filter only HTTP/HTTPS links that are internal (cancer.org) and not external services
        List<String>httpLinks = allHrefs.stream()
                .filter(href -> href.startsWith("http://") || href.startsWith("https://"))
                .filter(href -> href.contains("cancer.org") || href.contains("donate.cancer.org")) // Keep only cancer.org domains
                .filter(href -> !href.contains("onetrust.com")) // Exclude privacy portal (external service)
                .filter(href -> !href.contains("privacyportal")) // Extra safety
                .collect(Collectors.toList());

        logger.info("Filtered {} internal cancer.org HTTP/HTTPS links for navigation verification", httpLinks.size());

        int successfulNavs = 0;
        for (int i = 0; i < httpLinks.size(); i++) {
            String href = httpLinks.get(i);
            logger.info("Verifying link {}: {}", i + 1, href);

            if (driver == null) {
                logger.error("Driver became null during test - stopping verification");
                Assert.fail("Driver became null during link verification");
                return;
            }

            try {
                // Navigate to the link
                driver.get(href);

                // Wait for page to load (any cancer.org page should have <title> or <body>)
                wait.until(ExpectedConditions.presenceOfElementLocated(org.openqa.selenium.By.tagName("body")));

                String newUrl = driver.getCurrentUrl();
                boolean navigated = !newUrl.equals(originalUrl);

                // Relaxed assertion: Just check that URL changed (external redirects are okay)
                Assert.assertTrue(navigated, "Link did not change URL: " + href + " -> " + newUrl);

                logger.debug("Successful navigation to: {}", newUrl);
                successfulNavs++;

                // Navigate back
                driver.navigate().back();
                wait.until(ExpectedConditions.urlToBe(originalUrl));

            } catch (NoSuchWindowException | org.openqa.selenium.TimeoutException e) {
                logger.warn("Navigation failed for {}: {}", href, e.getMessage());
                try {
                    driver.get(originalUrl);
                } catch (Exception resetE) {
                    logger.error("Failed to reset after timeout: {}", resetE.getMessage());
                    break;
                }
            } catch (Exception e) {
                logger.error("Unexpected error for link {}: {}", href, e.getMessage());
                if (driver != null) {
                    try {
                        driver.get(originalUrl);
                    } catch (Exception resetE) {
                        logger.error("Failed to reset after error: {}", resetE.getMessage());
                        break;
                    }
                } else {
                    break;
                }
            }
        }

        // Final assertion: 80%+ success rate on filtered internal links
        double successRate = httpLinks.isEmpty() ? 1.0 : (double) successfulNavs / httpLinks.size();
        Assert.assertTrue(successRate >= 0.8,
                "Success rate too low: " + String.format("%.2f", successRate) +
                        " (" + successfulNavs + "/" + httpLinks.size() + ")");

        logger.info("LinkVerificationTest completed: {} successful out of {} internal links", successfulNavs, httpLinks.size());
    }
}