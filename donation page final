package pages;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import utils.CommanActions;

import java.time.Duration;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class DonationPage {
    private static final Logger logger = LogManager.getLogger(DonationPage.class);

    private final WebDriver driver;
    private final WebDriverWait wait;
    private final CommanActions commanActions;

    // ──────────────────────────────────────
    // Page Elements
    // ──────────────────────────────────────
    @FindBy(xpath = "//*[@id='app_root']/div/div[1]/div/div[2]/div/p")
    private WebElement heroText;

    @FindBy(xpath = "//*[@id='svg_header_image']")
    private WebElement backgroundImage;

    @FindBy(xpath = "//button[contains(@class,'one-time')] | //button[contains(text(),'One-Time')]")
    private WebElement oneTimeOption;

    @FindBy(xpath = "//button[contains(@class,'monthly')] | //button[contains(text(),'Monthly')]")
    private WebElement monthlyOption;

    // Amount buttons (robust locators)
    @FindBy(xpath = "//button[contains(text(),'$25') or @value='25']")
    private WebElement amount25Button;

    @FindBy(xpath = "//*[@id='app_root']/div/div[2]/div[3]/div[3]/div[1]/div[1]")
    private WebElement amount50Button;

    @FindBy(xpath = "//*[@id='app_root']/div/div[2]/div[3]/div[2]/div[1]/div[4]")
    private WebElement amount100Button;

    @FindBy(xpath = "//button[contains(text(),'$250') or @value='250']")
    private WebElement amount250Button;

    @FindBy(xpath = "//button[contains(text(),'$500') or @value='500']")
    private WebElement amount500Button;

    @FindBy(xpath = "//button[contains(text(),'$1,000') or @value='1000']")
    private WebElement amount1000Button;

    @FindBy(xpath = "//button[contains(text(),'$2,500') or @value='2500']")
    private WebElement amount2500Button;

    @FindBy(xpath = "//button[contains(text(),'$5,000') or @value='5000']")
    private WebElement amount5000Button;

    @FindBy(xpath = "//input[@type='number' or contains(@placeholder,'Other')]")
    private WebElement customAmountField;

    @FindBy(xpath = "//button[contains(text(),'Continue') or contains(@class,'continue')]")
    private WebElement continueButton;

    @FindBy(xpath = "//button[contains(text(),'Back')]")
    private WebElement backButton;

    @FindBy(xpath = "//button[contains(text(),'Cancel')]")
    private WebElement cancelButton;

    @FindBy(xpath = "//a[contains(@href,'facebook') or contains(@href,'twitter') or contains(@href,'linkedin')]")
    private List<WebElement> shareButtons;

    @FindBy(xpath = "//a[contains(text(),'Learn More')] | //button[contains(text(),'Learn More')]")
    private WebElement learnMoreButton;

    @FindBy(xpath = "//a[@href]")
    private List<WebElement> allLinks;

    // ──────────────────────────────────────
    // Constructor
    // ──────────────────────────────────────
    public DonationPage(WebDriver driver) {
        this.driver = driver;
        this.wait = new WebDriverWait(driver, Duration.ofSeconds(12));
        this.commanActions = new CommanActions(driver);
        PageFactory.initElements(driver, this);
        logger.debug("DonationPage initialized");
    }

    // ──────────────────────────────────────
    // Basic Page Actions
    // ──────────────────────────────────────
    public void openPage(String url) {
        driver.get(url);
        wait.until(ExpectedConditions.visibilityOf(heroText));
    }

    public void selectOneTimeDonation() {
        logger.info("Selecting One-Time");
        commanActions.clickElement(oneTimeOption);
        wait.until(ExpectedConditions.attributeContains(oneTimeOption, "class", "selected"));
    }

    public void selectMonthlyDonation() {
        logger.info("Selecting Monthly");
        commanActions.clickElement(monthlyOption);
        wait.until(ExpectedConditions.attributeContains(monthlyOption, "class", "selected"));
    }

    public void selectAmount(String amount) {
        logger.info("Selecting amount: {}", amount);
        try {
            WebElement btn = switch (amount) {
                case "25" -> amount25Button;
                case "50" -> amount50Button;
                case "100" -> amount100Button;
                case "250" -> amount250Button;
                case "500" -> amount500Button;
                case "1000" -> amount1000Button;
                case "2500" -> amount2500Button;
                case "5000" -> amount5000Button;
                default -> {
                    enterCustomAmount(amount);
                    yield null;
                }
            };
            if (btn != null) commanActions.clickElement(btn);
        } catch (Exception e) {
            logger.warn("Amount {} not supported – using $50 fallback", amount);
            commanActions.clickElement(amount50Button);
        }
    }

    public void enterCustomAmount(String amount) {
        logger.info("Entering custom amount: {}", amount);
        commanActions.isElementDisplayed(customAmountField);
        customAmountField.clear();
        customAmountField.sendKeys(amount);
    }

    public void clickContinue() { commanActions.clickElement(continueButton); }
    public void clickBack()     { commanActions.clickElement(backButton); }
    public void clickCancel()   { commanActions.clickElement(cancelButton); }
    public void clickShareButton(int idx) {
        if (idx >= 0 && idx < shareButtons.size()) commanActions.clickElement(shareButtons.get(idx));
    }
    public void clickLearnMore() { commanActions.clickElement(learnMoreButton); }

    // ──────────────────────────────────────
    // MODE-AWARE STRUCTURE CHECK (Java 8)
    // ──────────────────────────────────────
    private static final List<WebElement> ONE_TIME_AMOUNTS = Arrays.asList();
    private static final List<WebElement> MONTHLY_AMOUNTS = Arrays.asList();

    public boolean isPageStructureIntact() {
        logger.info("Verifying page structure (mode-aware)");

        // 1. Core elements – always required
        boolean core = commanActions.isElementDisplayed(oneTimeOption) &&
                       commanActions.isElementDisplayed(monthlyOption) &&
                       commanActions.isElementDisplayed(continueButton);

        if (!core) {
            logger.warn("Core elements missing");
            return false;
        }

        // 2. Detect current mode
        boolean oneTime = isSelected(oneTimeOption);
        boolean monthly = isSelected(monthlyOption);

        logger.info("Mode → One-Time: {}, Monthly: {}", oneTime, monthly);

        // 3. Expected visible amounts
        List<WebElement> expected;
        if (oneTime) {
            expected = Arrays.asList(amount25Button, amount50Button, amount100Button, amount250Button);
        } else if (monthly) {
            expected = Arrays.asList(
                amount25Button, amount50Button, amount100Button, amount250Button,
                amount500Button, amount1000Button, amount2500Button, amount5000Button
            );
        } else {
            expected = Arrays.asList(amount25Button, amount50Button, amount100Button, amount250Button);
        }

        // 4. All expected amounts must be displayed
        boolean amountsOk = expected.stream()
                .allMatch(commanActions::isElementDisplayed);

        boolean result = core && amountsOk;
        logger.info("Structure check → {}", result ? "PASS" : "FAIL");
        return result;
    }

    private boolean isSelected(WebElement el) {
        try {
            String cls = el.getAttribute("class");
            String aria = el.getAttribute("aria-selected");
            return (cls != null && cls.contains("selected")) ||
                   "true".equalsIgnoreCase(aria);
        } catch (Exception e) {
            return false;
        }
    }

    // ──────────────────────────────────────
    // Link utilities (unchanged)
    // ──────────────────────────────────────
    public List<WebElement> getAllLinks() {
        return allLinks.stream()
                .filter(l -> {
                    String href = l.getAttribute("href");
                    return href != null && !href.isEmpty() && !href.startsWith("javascript") && !href.startsWith("#");
                })
                .collect(Collectors.toList());
    }

    public List<String> getAllLinkHrefs() {
        return getAllLinks().stream().map(l -> l.getAttribute("href")).collect(Collectors.toList());
    }

    public boolean verifyLinkNavigation(WebElement link) {
        // ... (same as before)
        return true;
    }
}