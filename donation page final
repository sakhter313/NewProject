package pages;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import utils.CommanActions;

import java.time.Duration;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class DonationPage {
    private static final Logger logger = LogManager.getLogger(DonationPage.class);

    private WebDriver driver;
    private WebDriverWait wait;
    private CommanActions commanActions;

    // === Page Elements ===
    @FindBy(xpath = "//*[@id='app_root']/div/div[1]/div/div[2]/div/p")
    private WebElement heroText;

    @FindBy(xpath = "//*[@id='svg_header_image']")
    private WebElement backgroundImage;

    @FindBy(xpath = "//*[@id='app_root']/div/div[2]/div[3]/div[2]/button[1]")
    private WebElement oneTimeOption;

    @FindBy(xpath = "//*[@id='app_root']/div/div[2]/div[3]/div[2]/button[2]")
    private WebElement monthlyOption;

    @FindBy(xpath = "//*[@id='app_root']//button[contains(text(), '$25') or @value='25' or contains(@class, 'amount-25')]")
    private WebElement amount25Button;

    @FindBy(xpath = "//*[@id='app_root']/div/div[2]/div[3]/div[3]/div[1]/div[1]")
    private WebElement amount50Button;

    @FindBy(xpath = "//*[@id='app_root']/div/div[2]/div[3]/div[2]/div[1]/div[4]")
    private WebElement amount100Button;

    @FindBy(xpath = "//*[@id='app_root']//button[contains(text(), '$250') or @value='250' or contains(@class, 'amount-250')]")
    private WebElement amount250Button;

    @FindBy(xpath = "//*[@id='app_root']//button[contains(text(), '$500') or @value='500' or contains(@class, 'amount-500')]")
    private WebElement amount500Button;

    @FindBy(xpath = "//*[@id='app_root']//button[contains(text(), '$1,000') or @value='1000' or contains(@class, 'amount-1000')]")
    private WebElement amount1000Button;

    @FindBy(xpath = "//*[@id='app_root']//button[contains(text(), '$2,500') or @value='2500' or contains(@class, 'amount-2500')]")
    private WebElement amount2500Button;

    @FindBy(xpath = "//*[@id='app_root']//button[contains(text(), '$5,000') or @value='5000' or contains(@class, 'amount-5000')]")
    private WebElement amount5000Button;

    // Custom amount input field
    @FindBy(xpath = "//*[@id='app_root']//input[@type='number' or @id='amount' or contains(@class, 'custom-amount') or contains(@placeholder, 'Other')]")
    private WebElement customAmountField;

    // Navigation buttons
    @FindBy(xpath = "//*[@id='app_root']//button[contains(text(), 'Continue') or contains(text(), 'Next') or contains(@class, 'continue') or @type='submit']")
    private WebElement continueButton;

    @FindBy(xpath = "//*[@id='app_root']//button[contains(text(), 'Back') or contains(@class, 'back')]")
    private WebElement backButton;

    @FindBy(xpath = "//*[@id='app_root']//button[contains(text(), 'Cancel') or contains(@class, 'cancel')]")
    private WebElement cancelButton;

    // Social sharing
    @FindBy(xpath = "//*[@id='app_root']//a[contains(@class, 'social-share') or contains(@href, 'facebook.com') or contains(@href, 'twitter.com') or contains(@href, 'linkedin.com')]")
    private List<WebElement> shareButtons;

    // Learn More
    @FindBy(xpath = "//*[@id='app_root']//button[contains(text(), 'Learn More') or contains(@class, 'learn-more')] | //*[@id='app_root']//a[contains(text(), 'Learn More')]")
    private WebElement learnMoreButton;

    // All valid links
    @FindBy(xpath = "//a[@href]")
    private List<WebElement> allLinks;

    public DonationPage(WebDriver driver) {
        this.driver = driver;
        this.wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        this.commanActions = new CommanActions(driver);
        PageFactory.initElements(driver, this);
        logger.debug("DonationPage initialized");
    }

    public void openPage(String url) {
        logger.info("Opening page: {}", url);
        driver.get(url);
        try {
            wait.until(ExpectedConditions.visibilityOf(heroText));
            logger.info("Page loaded successfully - Hero text visible");
        } catch (Exception e) {
            logger.error("Page load failed - Hero text not visible: {}", e.getMessage(), e);
            throw e;
        }
    }

    public String getHeroText() {
        try {
            String text = heroText.getText();
            logger.debug("Retrieved hero text: {}", text);
            return text;
        } catch (Exception e) {
            logger.error("Failed to get hero text: {}", e.getMessage(), e);
            return "";
        }
    }

    public boolean isBackgroundImageDisplayed() {
        logger.info("Verifying background image display");
        return commanActions.isElementDisplayed(backgroundImage);
    }

    public void selectOneTimeDonation() {
        logger.info("Selecting one-time donation option");
        commanActions.clickElement(oneTimeOption);
        // Wait for page to stabilize after click (no navigation or reload)
        wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//*[@id='app_root']")));
    }

    public void selectMonthlyDonation() {
        logger.info("Selecting monthly donation option");
        commanActions.clickElement(monthlyOption);
        // Wait for page to stabilize after click (no navigation or reload)
        wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//*[@id='app_root']")));
    }

    public void selectAmount(String amount) {
        logger.info("Selecting amount: {}", amount);
        WebElement amountBtn;
        try {
            switch (amount) {
                case "25":
                    amountBtn = amount25Button;
                    break;
                case "50":
                    amountBtn = amount50Button;
                    break;
                case "100":
                    amountBtn = amount100Button;
                    break;
                case "250":
                    amountBtn = amount250Button;
                    break;
                case "500":
                    amountBtn = amount500Button;
                    break;
                case "1000":
                    amountBtn = amount1000Button;
                    break;
                case "2500":
                    amountBtn = amount2500Button;
                    break;
                case "5000":
                    amountBtn = amount5000Button;
                    break;
                default:
                    logger.info("Entering custom amount: {}", amount);
                    enterCustomAmount(amount);  // Delegate to new method
                    return;
            }
            // Deselect all other amount buttons before selecting this one (ensures single selection)
            deselectAllAmountButtons();
            commanActions.clickElement(amountBtn);
            // Wait for this button to be selected
            wait.until(ExpectedConditions.attributeContains(amountBtn, "class", "selected"));
        } catch (Exception e) {
            logger.warn("Unsupported amount: {}. Falling back to $50", amount);
            deselectAllAmountButtons();
            commanActions.clickElement(amount50Button);
        }
    }

    // New method to deselect all amount buttons (ensures single selection for both modes)
    private void deselectAllAmountButtons() {
        List<WebElement> allAmountButtons = Arrays.asList(
            amount25Button, amount50Button, amount100Button, amount250Button,
            amount500Button, amount1000Button, amount2500Button, amount5000Button
        );
        for (WebElement btn : allAmountButtons) {
            try {
                if (commanActions.isElementDisplayed(btn) && btn.getAttribute("class").contains("selected")) {
                    btn.click(); // Click to deselect if selected
                    wait.until(ExpectedConditions.not(ExpectedConditions.attributeContains(btn, "class", "selected")));
                }
            } catch (Exception ignored) {
                // Ignore if button not present or not clickable
            }
        }
    }

    // === ADDED METHOD AS REQUESTED ===
    public void enterCustomAmount(String amount) {
        logger.info("Entering custom amount: {}", amount);
        commanActions.isElementDisplayed(customAmountField);
        customAmountField.clear();
        customAmountField.sendKeys(amount);
        // No need to click anything else â€” Continue will pick it up
    }

    public void clickContinue() {
        logger.info("Clicking Continue button");
        commanActions.clickElement(continueButton);
    }

    public void clickBack() {
        logger.info("Clicking Back button");
        commanActions.clickElement(backButton);
    }

    public void clickCancel() {
        logger.info("Clicking Cancel button");
        commanActions.clickElement(cancelButton);
    }

    public void clickShareButton(int index) {
        logger.info("Clicking Share button at index: {}", index);
        if (index >= 0 && index < shareButtons.size()) {
            commanActions.clickElement(shareButtons.get(index));
        } else {
            logger.warn("Invalid share button index: {}", index);
            throw new IllegalArgumentException("Invalid share button index: " + index);
        }
    }

    public void clickLearnMore() {
        logger.info("Clicking Learn More button");
        commanActions.clickElement(learnMoreButton);
    }

    public List<WebElement> getAllLinks() {
        logger.debug("Fetching all links");
        return allLinks.stream()
                .filter(link -> {
                    String href = link.getAttribute("href");
                    return href != null && !href.isEmpty() && !href.startsWith("javascript") && !href.startsWith("#");
                })
                .collect(Collectors.toList());
    }

    public List<String> getAllLinkHrefs() {
        logger.debug("Fetching all link hrefs");
        return getAllLinks().stream()
                .map(link -> link.getAttribute("href"))
                .collect(Collectors.toList());
    }

    public boolean verifyLinkNavigation(WebElement link) {
        logger.info("Verifying navigation for link: {}", link.getAttribute("href"));
        String originalWindow = driver.getWindowHandle();
        try {
            commanActions.clickElement(link);
            wait.until(ExpectedConditions.not(ExpectedConditions.urlToBe(driver.getCurrentUrl())));
            String newUrl = driver.getCurrentUrl();
            logger.info("Navigated to: {}", newUrl);
            return newUrl.contains("cancer.org") || newUrl.equals("about:blank");
        } catch (Exception e) {
            logger.warn("Link navigation failed: {}", e.getMessage());
            return false;
        } finally {
            for (String windowHandle : driver.getWindowHandles()) {
                if (!windowHandle.equals(originalWindow)) {
                    driver.switchTo().window(windowHandle);
                    driver.close();
                    break;
                }
            }
            driver.switchTo().window(originalWindow);
        }
    }

    public boolean isPageStructureIntact() {
        logger.info("Checking if donation page structure is intact (DOM presence only)");

        try {
            // Check existence in DOM (not visibility) for core elements - structure remains if elements are present
            boolean oneTimePresent = driver.findElements(By.xpath("//*[@id='app_root']/div/div[2]/div[3]/div[2]/button[1]")).size() > 0;
            boolean monthlyPresent = driver.findElements(By.xpath("//*[@id='app_root']/div/div[2]/div[3]/div[2]/button[2]")).size() > 0;
            boolean continuePresent = driver.findElements(By.xpath("//*[@id='app_root']//button[contains(text(), 'Continue') or contains(text(), 'Next') or contains(@class, 'continue') or @type='submit']")).size() > 0;

            boolean result = oneTimePresent && monthlyPresent && continuePresent;
            logger.info("Page structure check (DOM presence): {}", result ? "Intact" : "Broken");
            return result;

        } catch (Exception e) {
            logger.warn("Exception during structure check: {}", e.getMessage());
            return false;
        }
    }

    // Helper methods to detect current mode (kept for potential future use)
    private boolean isOneTimeSelected() {
        try {
            String classAttr = oneTimeOption.getAttribute("class");
            String ariaSelected = oneTimeOption.getAttribute("aria-selected");
            return (classAttr != null && classAttr.contains("selected")) ||
                    "true".equalsIgnoreCase(ariaSelected);
        } catch (Exception e) {
            return false;
        }
    }

    private boolean isMonthlySelected() {
        try {
            String classAttr = monthlyOption.getAttribute("class");
            String ariaSelected = monthlyOption.getAttribute("aria-selected");
            return (classAttr != null && classAttr.contains("selected")) ||
                    "true".equalsIgnoreCase(ariaSelected);
        } catch (Exception e) {
            return false;
        }
    }
}